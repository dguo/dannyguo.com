#!/usr/bin/env python3

# ./dev -h

import argparse
from http.client import HTTPException
import os
from shutil import which
from subprocess import run
import sys
from threading import Thread
import time
from urllib.error import URLError
from urllib.request import urlopen
import webbrowser

parser = argparse.ArgumentParser(prog='./dev')
subparsers = parser.add_subparsers(metavar='<command>', title='commands')

DOCKER_RUN = [
    'docker', 'run', '--init', '-it', '--rm', '-v',
    f'{os.getcwd()}:/src:cached', '-w=/src', '-p', '1313:1313',
]

DOCKER_HUGO = DOCKER_RUN + ['cibuilds/hugo:0.41']

DOCKER_NODE = DOCKER_RUN + ['node:10.4.0-alpine']

def command(help):
    def decorator(func):
        parser = subparsers.add_parser(func.__name__, help=help)
        parser.set_defaults(func=func)
        return func
    return decorator

def open_in_browser():
    site = 'http://localhost:1313'
    while True:
        try:
            urlopen(site)
            break
        except (ConnectionError, URLError, HTTPException):
            time.sleep(1)
    webbrowser.open(site)

@command('Sync the search index with Algolia')
def algolia(args, remaining):
    # Check for required environment variables
    if not os.path.isfile('.env'):
        print('Aborting: create a .env file based off of template.env')
        return 1

    with open('template.env') as template:
        required_variables = {
            line.split('=')[0] for line in template
            if '=' in line and line[0] != '#'
        }

    with open('.env') as env:
        set_variables = {
            line.split('=')[0] for line in env
            if '=' in line and line[0] != '#'
        }

    missing_variables = required_variables - set_variables
    if missing_variables:
        print('Your .env is missing these variables:')
        print(', '.join(missing_variables))
        return 1

    # Generate the search index by generating the site
    rc = hugo(None, None)
    if rc:
        return rc

    # Sync with Algolia
    if which('atomic-algolia'):
        return run(['atomic-algolia']).returncode
    if which('npx'):
        return run(['npx', 'atomic-algolia']).returncode
    return run(DOCKER_NODE + ['npx', 'atomic-algolia']).returncode

@command('Run a Hugo command')
def hugo(args, remaining):
    return run(DOCKER_HUGO + ['hugo'] + (remaining or [])).returncode

@command('Lint the resulting HTML')
def lint(args, remaining):
    rc = hugo(None, None)
    if rc:
        return rc
    return run(DOCKER_HUGO + ['htmlproofer', '--check-favicon', '--check-html',
                             '--check-opengraph', 'public']).returncode

@command('Open a shell')
def sh(args, remaining):
    return run(DOCKER_HUGO + ['sh']).returncode

@command('Start development')
def start(args, remaining):
    Thread(target=open_in_browser).start()
    run(DOCKER_HUGO + ['hugo', 'server', '--bind', '0.0.0.0', '--buildDrafts'])

if __name__ == '__main__':
    if len(sys.argv) > 1:
        args, remaining = parser.parse_known_args()
        returncode = args.func(args, remaining)
        sys.exit(returncode)
    else:
        parser.print_help()
