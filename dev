#!/usr/bin/env python3

# ./dev -h

import argparse
from http.client import HTTPException
import os
from subprocess import run
import sys
from threading import Thread
import time
from urllib.error import URLError
from urllib.request import urlopen
import webbrowser

parser = argparse.ArgumentParser(prog='./dev')
subparsers = parser.add_subparsers(metavar='<command>', title='commands')

DOCKER_RUN = [
    'docker', 'run', '--init', '-it', '--rm', '-v',
    f'{os.getcwd()}:/src:cached', '-w=/src', '-p', '1313:1313',
    'jguyomard/hugo-builder:0.40-extras'
]

def command(help):
    def decorator(func):
        parser = subparsers.add_parser(func.__name__, help=help)
        parser.set_defaults(func=func)
        return func
    return decorator

def open_in_browser():
    site = 'http://localhost:1313'
    while True:
        try:
            urlopen(site)
            break
        except (ConnectionError, URLError, HTTPException):
            time.sleep(1)
    webbrowser.open(site)

@command('Open a shell')
def sh(args, remaining):
    return run(DOCKER_RUN + ['sh']).returncode

@command('Start development')
def start(args, remaining):
    Thread(target=open_in_browser).start()
    run(DOCKER_RUN + ['hugo', 'serve', '--bind', '0.0.0.0', '-v'])

@command('Run a Hugo command')
def hugo(args, remaining):
    return run(DOCKER_RUN + ['hugo'] + remaining or []).returncode

if __name__ == '__main__':
    if len(sys.argv) > 1:
        args, remaining = parser.parse_known_args()
        returncode = args.func(args, remaining)
        sys.exit(returncode)
    else:
        parser.print_help()
